//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductLicenseServiceClietn.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicAcquisitionTokenStatusType", Namespace="http://schemas.datacontract.org/2004/07/ProductLicenseServcie.Services")]
    [System.SerializableAttribute()]
    public partial class LicAcquisitionTokenStatusType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string productNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ProductLicenseServiceClietn.ServiceReference1.AcquisitionChannelStatusType tokenStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string productName {
            get {
                return this.productNameField;
            }
            set {
                if ((object.ReferenceEquals(this.productNameField, value) != true)) {
                    this.productNameField = value;
                    this.RaisePropertyChanged("productName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductLicenseServiceClietn.ServiceReference1.AcquisitionChannelStatusType tokenStatus {
            get {
                return this.tokenStatusField;
            }
            set {
                if ((this.tokenStatusField.Equals(value) != true)) {
                    this.tokenStatusField = value;
                    this.RaisePropertyChanged("tokenStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AcquisitionChannelStatusType", Namespace="http://schemas.datacontract.org/2004/07/ProductLicenseServcie.Services")]
    public enum AcquisitionChannelStatusType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 100,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_TOKENS_AVAILABLE = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_ENOUGH_TOKENS = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TOKEN_CATALOG_NOT_FOUND = 103,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TOKEN_COST_COULD_NOT_DETERMINED = 104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SERVER_UNAVAILABLE = 105,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITokenLicenseService", CallbackContract=typeof(ProductLicenseServiceClietn.ServiceReference1.ITokenLicenseServiceCallback))]
    public interface ITokenLicenseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenLicenseService/AcquireTokenLicense", ReplyAction="http://tempuri.org/ITokenLicenseService/AcquireTokenLicenseResponse")]
        void AcquireTokenLicense(string productName, string catalogVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITokenLicenseService/AcquireTokenLicense", ReplyAction="http://tempuri.org/ITokenLicenseService/AcquireTokenLicenseResponse")]
        System.Threading.Tasks.Task AcquireTokenLicenseAsync(string productName, string catalogVersion);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenLicenseServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITokenLicenseService/OnAcquisitionLicenseStatus")]
        void OnAcquisitionLicenseStatus(ProductLicenseServiceClietn.ServiceReference1.LicAcquisitionTokenStatusType LicAcquisitionTokenStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenLicenseServiceChannel : ProductLicenseServiceClietn.ServiceReference1.ITokenLicenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenLicenseServiceClient : System.ServiceModel.DuplexClientBase<ProductLicenseServiceClietn.ServiceReference1.ITokenLicenseService>, ProductLicenseServiceClietn.ServiceReference1.ITokenLicenseService {
        
        public TokenLicenseServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TokenLicenseServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TokenLicenseServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TokenLicenseServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TokenLicenseServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AcquireTokenLicense(string productName, string catalogVersion) {
            base.Channel.AcquireTokenLicense(productName, catalogVersion);
        }
        
        public System.Threading.Tasks.Task AcquireTokenLicenseAsync(string productName, string catalogVersion) {
            return base.Channel.AcquireTokenLicenseAsync(productName, catalogVersion);
        }
    }
}
